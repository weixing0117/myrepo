
package cn.com.comit.appointment.modules.wechat.test.msg;

import java.rmi.RemoteException;
import java.util.Date;
import java.util.Random;
import javax.xml.namespace.QName;
import javax.xml.rpc.ParameterMode;
import javax.xml.rpc.ServiceException;
import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.axis.encoding.XMLType;
import cn.com.comit.appointment.common.utils.DateUtils;
import cn.com.comit.appointment.modules.wechat.utils.CommonUtil;

public class SendMessageTest {
	//调用
	public static void sendMessage( String[] str) {
		String result="";
	    String url = "接口地址(x.x.x.x)/服务名.asmx";  
	    String namespace = "http://xxx.cn/";  
	    String methodName = "方法名";  
	    String soapActionURI = "http://xxx.cn/方法名";  
	    Service service = new Service();  
	    Call call;  
	    try {  
	        call = (Call) service.createCall();  

	        call.setTargetEndpointAddress(url);  

	        call.setUseSOAPAction(true);  

	        call.setSOAPActionURI(soapActionURI);  

	        call.setOperationName(new QName(namespace, methodName));  

	        call.addParameter(new QName(namespace, "phone"), XMLType.XSD_STRING,ParameterMode.IN);

	        call.addParameter(new QName(namespace, "content"), XMLType.XSD_STRING,ParameterMode.IN);

	        call.setReturnType(XMLType.XSD_STRING);  

	        //对传入的参数进行赋值操作
	        String key=DESEncryption.toHexString(DESEncryption.encrypt(DateUtils.formatDateTime(new Date()),"tesecret"));

	        System.out.println("key-->"+key);

	        //开始调用服务
	         result = (String) call.invoke(str);  

	        System.out.println("result is-->"+result);  //对返回参数进行输出

	    } catch (ServiceException e) {  

	        e.printStackTrace();  

		}catch(RemoteException e){

			e.printStackTrace(); 

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}

	//封装参数
	public static void sendParams(String phone,String content){
		try {
		String[] str = new String[3];  
		  str[0] =phone; //手机号码
	      str[1] =content;  //发送内容

	      String key;

		  key = DESEncryption.toHexString(DESEncryption.encrypt(DateUtils.formatDateTime(new Date()),"tesecret"));

		  str[2]=key;

		  sendMessage(str);

		} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}

public static void main(String[] args) {

	 StringBuilder code = new StringBuilder();  

	 Random random = new Random();  
     // 6位验证码  
     for (int i = 0; i < 6; i++) {  
         code.append(String.valueOf(random.nextInt(10)));  
     }  
	String content="正在核实您的用户信息，您的验证码是："+code.toString()+"   验证码5分钟内有效，如非本人操作请忽略";
	sendParams("手机号码",content);
	 List<Header> headers = (List<Header>) serviceClient.getOptions().getProperty(HTTPConstants.HTTP_HEADERS);  
if (headers == null){  
    headers = new ArrayList<Header>();
}
headers.add(new Header("Accept-Language", "ZH"));  
serviceClient.getOptions().setProperty(HTTPConstants.HTTP_HEADERS, headers);  

        // 使用RPC方式调用WebService    
        RPCServiceClient serviceClient = new RPCServiceClient();  
        // 指定调用WebService的URL    
        EndpointReference targetEPR = new EndpointReference(url);  
        Options options = serviceClient.getOptions();  
        //确定目标服务地址    
        options.setTo(targetEPR);  
        //确定调用方法    
        options.setAction("urn:getName");  
  
        /**  
         * 指定要调用的getPrice方法及WSDL文件的命名空间  
         * 如果 webservice 服务端由axis2编写  
         * 命名空间 不一致导致的问题  
         * org.apache.axis2.AxisFault: java.lang.RuntimeException: Unexpected subelement arg0  
         */  
        QName qname = new QName("http://jh.com", "getName");  
        // 指定getPrice方法的参数值    
        Object[] parameters = new Object[] { "admin... 您终于进来了" };  
  
        // 指定getPrice方法返回值的数据类型的Class对象    
        Class[] returnTypes = new Class[] { String.class };  
  
        // 调用方法一 传递参数，调用服务，获取服务返回结果集    
        OMElement element = serviceClient.invokeBlocking(qname, parameters);  
        //值得注意的是，返回结果就是一段由OMElement对象封装的xml字符串。    
        //我们可以对之灵活应用,下面我取第一个元素值，并打印之。因为调用的方法返回一个结果    
        String result = element.getFirstElement().getText();  
        System.out.println(result);  
        return result;  


     Callcall = (Call) service.createCall() ;
     //注册JavaBean（注意:和server-config.wsdd编写内容一致）
     QNameqn =
newQName("urn:BeanService","Order");
     call.registerTypeMapping(Order.class, qn,
newBeanSerializerFactory(Order.class, qn),
newBeanDeserializerFactory(Order.class,qn)) ;
     Stringname =
"no !";
     //创建调用
     call.setTargetEndpointAddress(new URL(url)) ;
     //调用服务器的方法
     call.setOperationName(new QName("order","returnOrder"));
     //设定传入的参数
     call.addParameter("arg1", qn,ParameterMode.IN);
     //设置返回的类型
     call.setReturnType(qn,Order.class) ;
     //接收结果
     Orderresult = (Order) call.invoke(new Object[]{order}) ;
     if(result !=
null){
        name= result.getName() ;
     }
     System.out.println(name);
   }
}

}


POST /服务名.asmx HTTP/1.1 

Host: 接口地址（x.x.x.x）(url :接口地址/服务名.asmx)

Content-Type: text/xml; charset=utf-8

Content-Length: length

SOAPAction: "http://xxx.cn/方法名"

 

<?xml version="1.0" encoding="utf-8"?>

<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">

  <soap:Body>

    <方法名 xmlns="http://xxx.cn/">(namespace :http://xxx.cn/)

      <phone>string</phone>

      <content>string</content>

    </方法名>

  </soap:Body>

</soap:Envelope>

 

